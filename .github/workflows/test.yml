name: Automated Test & Fix Workflow

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Run tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          JWT_SECRET: test-secret-key-for-ci
          MONGODB_URI: mongodb://localhost:27017/test
        run: npm run test:ci
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: backend/junit.xml

  frontend-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run tests
        working-directory: ./frontend
        env:
          CI: true
        run: npm run test:ci
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage
  
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install root dependencies
        run: npm ci
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
      
      - name: Create .env files
        run: |
          echo "JWT_SECRET=test-secret-for-e2e" > backend/.env
          echo "MONGODB_URI=mongodb://localhost:27017/test-e2e" >> backend/.env
          echo "PORT=5004" >> backend/.env
          echo "NODE_ENV=test" >> backend/.env
      
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.10.0
        with:
          mongodb-version: '6.0'
      
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true
      
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: test-results

  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests]
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Generate summary report
        run: |
          echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Backend Tests" >> $GITHUB_STEP_SUMMARY
          if [ -f backend-test-results/junit.xml ]; then
            echo "✅ Backend tests completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Backend tests failed or incomplete" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Frontend Tests" >> $GITHUB_STEP_SUMMARY
          if [ -d frontend-coverage ]; then
            echo "✅ Frontend tests completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Frontend tests failed or incomplete" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## E2E Tests" >> $GITHUB_STEP_SUMMARY
          if [ -d playwright-report ]; then
            echo "✅ E2E tests completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ E2E tests failed or incomplete" >> $GITHUB_STEP_SUMMARY
          fi
